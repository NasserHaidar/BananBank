import logging
from collections import defaultdict
from telegram import Update, ForceReply
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å —Å –±–∞–Ω–∞–Ω–∞–º–∏
user_scores = defaultdict(int)
conn = sqlite3.connect('bank.db')
c = conn.cursor()

DATABASE = 'bank.db'

def connect_db():
    return sqlite3.connect(DATABASE)



# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = {5774159898}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.username}! –Ø –±–æ—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–Ω–∞–Ω–æ–≤ –∑–∞ —Ä–µ–∞–∫—Ü–∏–∏ üëç. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–∞–Ω–∞–Ω—ã!",
        reply_markup=ForceReply(selective=True),
    )

async def handle_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.reply_to_message and update.message.text == 'üëç':
        replied_user_id = update.message.reply_to_message.from_user.id
        replied_username = update.message.reply_to_message.from_user.username
        c.execute('SELECT bananas FROM users WHERE username = ?', (replied_user_id,))
        result = c.fetchone()

        if result:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ
            new_score = result[0] + 1
            c.execute('UPDATE users SET bananas = ? WHERE username = ?', (new_score, replied_user_id))
            conn.commit()
            await update.message.reply_text(f"{replied_username}, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –±–∞–Ω–∞–Ω!")
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            c.execute('INSERT INTO users (username, bananas) VALUES (?, ?)',
                      (replied_username, 1))
            conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫—Ä—É—Ç–∫—É
        if update.effective_user.id != replied_user_id:
            user_scores[replied_username] += 1
            await update.message.reply_text(f"{replied_username}, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –±–∞–Ω–∞–Ω!")
        else:
            await update.message.reply_text("–ù–∞–∫—Ä—É—Ç–∏—Ç—å —Ö–æ—Ç–µ–ª? –Ø –Ω–µ –≥–ª—É–ø–∞—è –æ–±–µ–∑—å—è–Ω–∞, –∞ –ø–æ—Ä–æ–¥–∏—Å—Ç–∞—è –º–∞—Ä—Ç—ã—à–∫–∞!")

async def score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    score = user_scores.get(user.username, 0)
    await update.message.reply_text(f"{user.username}, —É –≤–∞—Å {score} –±–∞–Ω–∞–Ω–æ–≤.")

async def admin_scores(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id in ADMINS:
        stats = "\n".join([f"{username}: {score} –±–∞–Ω–∞–Ω–æ–≤" for username, score in user_scores.items()])
        await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{stats if stats else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'}")
    else:
        await update.message.reply_text("–¢—ã –µ—â–µ –Ω–µ —Ç–∞–∫–∞—è –≤–∞–∂–Ω–∞—è –æ–±–µ–∑—å—è–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def edit_score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id in ADMINS:
        if len(context.args) == 2:
            username = context.args[0]
            try:
                new_score = int(context.args[1])
                user_scores[username] = new_score
                await update.message.reply_text(f"–ë–∞–Ω–∞–Ω—ã –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {new_score}.")
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–Ω–∞–Ω–æ–≤.")
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_score <username> <new_score>")
    else:
        await update.message.reply_text("–¢—ã –µ—â–µ –Ω–µ —Ç–∞–∫–∞—è –≤–∞–∂–Ω–∞—è –æ–±–µ–∑—å—è–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def main() -> None:
    application = ApplicationBuilder().token('7404211940:AAGhoz0xxPFZU39FoBDZLM6WDtr7ZzmHXVQ').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reaction))
    application.add_handler(CommandHandler("score", score))
    application.add_handler(CommandHandler("admin_scores", admin_scores))
    application.add_handler(CommandHandler("edit_score", edit_score))

    application.run_polling()

if __name__ == '__main__':
    main()
