import logging
import sqlite3
from telegram import Update, ForceReply
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

# Настройка логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# Настройка базы данных
conn = sqlite3.connect('bank.db')
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    username TEXT PRIMARY KEY,
    bananas INTEGER DEFAULT 0
)
''')
conn.commit()

# ID администраторов
ADMINS = {5774159898}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Команда /start."""
    user = update.effective_user.username
    cursor.execute("INSERT OR IGNORE INTO users (username) VALUES (?)", (user,))
    conn.commit()

    await update.message.reply_text(
        f"Привет, {user}! Добро пожаловать в BananBank. Используйте /balance для проверки баланса."
    )


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Команда /balance для проверки баланса."""
    user = update.effective_user.username
    cursor.execute("SELECT bananas FROM users WHERE username = ?", (user,))
    result = cursor.fetchone()

    if result:
        bananas = result[0]
        await update.message.reply_text(f"Ваш баланс: {bananas} бананов.")
    else:
        await update.message.reply_text("Вы не зарегистрированы.")


async def send_bananas(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Команда /send для отправки бананов другому пользователю."""
    if len(context.args) < 2:
        await update.message.reply_text("Использование: /send <username> <количество>")
        return

    to_user = context.args[0]
    amount = int(context.args[1])
    from_user = update.effective_user.username

    cursor.execute("SELECT bananas FROM users WHERE username = ?", (from_user,))
    from_result = cursor.fetchone()
    cursor.execute("SELECT bananas FROM users WHERE username = ?", (to_user,))
    to_result = cursor.fetchone()

    if from_result and to_result:
        from_bananas = from_result[0]
        if from_bananas >= amount:
            cursor.execute("UPDATE users SET bananas = bananas - ? WHERE username = ?", (amount, from_user))
            cursor.execute("UPDATE users SET bananas = bananas + ? WHERE username = ?", (amount, to_user))
            conn.commit()
            await update.message.reply_text(f"Вы отправили {amount} бананов пользователю @{to_user}.")
        else:
            await update.message.reply_text("Недостаточно бананов для отправки.")
    else:
        await update.message.reply_text("Проверьте, что вы указали существующего пользователя.")


async def exchange(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Команда /exchange для обмена бананов на обеды."""
    user = update.effective_user.username
    cursor.execute("SELECT bananas FROM users WHERE username = ?", (user,))
    result = cursor.fetchone()

    if result:
        if result[0] >= 50  :  # Допустим, один обед стоит 50 бананов
            cursor.execute("UPDATE users SET bananas = bananas - 50 WHERE username = ?", (user,))
            conn.commit()
            await update.message.reply_text("Вы обменяли 50 бананов на обед!")
        else:
            await update.message.reply_text("У вас недостаточно бананов для обмена.")
    else:
        await update.message.reply_text("Вы не зарегистрированы.")


async def admin_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Команда /admin_balance для проверки баланса другого пользователя (администраторская)."""
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("У вас нет прав для выполнения этой команды.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("Использование: /admin_balance <username>")
        return

    user = context.args[0]
    cursor.execute("SELECT bananas FROM users WHERE username = ?", (user,))
    result = cursor.fetchone()

    if result:
        await update.message.reply_text(f"Баланс пользователя @{user}: {result[0]} бананов.")
    else:
        await update.message.reply_text("Пользователь не найден.")

async def edit_score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id in ADMINS:
        if len(context.args) == 2:
            username = context.args[0]
            try:
                new_score = int(context.args[1])
                conn[username] = new_score
                await update.message.reply_text(f"Бананы для {username} обновлены на {new_score}.")
            except ValueError:
                await update.message.reply_text("Пожалуйста, введите корректное значение бананов.")
        else:
            await update.message.reply_text("Использование: /edit_score <username> <new_score>")
    else:
        await update.message.reply_text("Ты еще не такая важная обезьяна для этой команды.")


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Команда /stop для завершения работы бота."""
    await update.message.reply_text("Бот остановлен. В следующем запуске данные будут сохранены.")
    conn.close()
    await context.bot.stop()

def main() -> None:
    """Запуск бота."""
    application = ApplicationBuilder().token('7718595666:AAEUbKomirUO85yswq55eIB5gmzjzVNJoeY').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("send", send_bananas))
    application.add_handler(CommandHandler("exchange", exchange))
    application.add_handler(CommandHandler("admin_balance", admin_balance))
    application.add_handler(CommandHandler("stop", stop))

    application.run_polling()

if __name__ == '__main__':
    main()


